<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ben Straub]]></title>
  <link href="http://ben.github.com/atom.xml" rel="self"/>
  <link href="http://ben.github.com/"/>
  <updated>2013-03-05T15:37:20-08:00</updated>
  <id>http://ben.github.com/</id>
  <author>
    <name><![CDATA[Ben Straub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[libgit2: The Repository]]></title>
    <link href="http://ben.github.com/2013/03/05/libgit2-the-repository/"/>
    <updated>2013-03-05T12:00:00-08:00</updated>
    <id>http://ben.github.com/2013/03/05/libgit2-the-repository</id>
    <content type="html"><![CDATA[<p>In <a href="http://libgit2.github.com/">libgit2</a>, the <code>git_repository</code> object is the gateway to getting interesting stuff out of git.
There are several ways to get your hands on one.</p>

<h2>Clone</h2>

<p>If your repository exists on a remote but not on the local machine, you can get it using <a href="http://libgit2.github.com/libgit2/#HEAD/group/repository/git_clone"><code>git_clone</code></a>, and once it&#8217;s done with all the network stuff, it spits out a repository object.
Check out <a href="http://ben.github.com/2013/02/01/stupid-libgit2-tricks-cloning/">my post on cloning</a> for more on that.</p>

<h2>Discover</h2>

<p>If you know a particular directory is a git repository, you can just hand the path to <a href="http://libgit2.github.com/libgit2/#HEAD/group/repository/git_repository_open"><code>git_repository_open</code></a>.
The path can be to a bare repository, a <code>.git</code> folder, or a working directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="n">git_repository_open</span><span class="p">(</span>
  <span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span>
  <span class="s">&quot;/path/to/repository/on/disk&quot;</span><span class="p">);</span>
</code></pre></div></figure>


<p>In classic C fashion, libgit2 APIs generally return 0 on success, and a negative error code on failure.
Occasionally the API documentation will mention the specific error codes that will come back, but you can always check the <a href="https://github.com/libgit2/libgit2/blob/HEAD/include/git2/errors.h#files">error header</a> for the values.</p>

<p>If all you have is a path that you <em>think</em> is controlled by git, you can let libgit2 walk the directory structure to find it&#8217;s owning repository (if there is one).
This approach works well if your application is dealing primarily with documents, like a text editor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="kt">char</span> <span class="n">path</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">git_repository_discover</span><span class="p">(</span>
  <span class="n">path</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span>                       <span class="c1">// buffer &amp; size</span>
  <span class="s">&quot;/path/to/a/controlled/file.md&quot;</span><span class="p">,</span>  <span class="c1">// where to start</span>
  <span class="nb">true</span><span class="p">,</span>                             <span class="c1">// across filesystems?</span>
  <span class="s">&quot;/path&quot;</span><span class="p">))</span>                         <span class="c1">// where to stop</span>
<span class="p">{</span>
  <span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span><span class="p">;</span>
  <span class="n">error</span> <span class="o">=</span> <span class="n">git_repository_open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></figure>


<h2>Initialize</h2>

<p>If you want to create a new repository, <a href="http://libgit2.github.com/libgit2/#HEAD/group/repository/git_repository_init"><code>git_repository_init</code></a> is the call for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="n">git_repository_init</span><span class="p">(</span>
  <span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span>                <span class="c1">// output</span>
  <span class="s">&quot;path/to/new/repo&quot;</span><span class="p">,</span>   <span class="c1">// path</span>
  <span class="nb">false</span><span class="p">);</span>               <span class="c1">// bare?</span>
</code></pre></div></figure>


<p>This is kind of like running <code>git init</code> from the command line.
If you need more control, you&#8217;ll use <a href="http://libgit2.github.com/libgit2/#HEAD/group/repository/git_repository_init_ext"><code>git_repository_init_ext</code></a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span><span class="p">;</span>
<span class="n">git_repository_init_options</span> <span class="n">options</span> <span class="o">=</span>
  <span class="n">GIT_REPOSITORY_INIT_OPTIONS_INIT</span><span class="p">;</span>
<span class="c1">// ... (configure options)</span>
<span class="kt">int</span> <span class="n">error</span> <span class="o">=</span> <span class="n">git_repository_init_ext</span><span class="p">(</span>
  <span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span>                <span class="c1">// output</span>
  <span class="s">&quot;/path/to/new/repo&quot;</span><span class="p">,</span>  <span class="c1">// path</span>
  <span class="o">&amp;</span><span class="n">options</span><span class="p">);</span>            <span class="c1">// options</span>
</code></pre></div></figure>


<p>The signature itself looks similar to the simpler version, but that options structure exposes <strong>lots</strong> of behavior.
Things like:</p>

<ul>
<li>separating your <code>.git</code> directory from the workdir</li>
<li>adding a description or using a template</li>
<li>setting the initial branch name</li>
</ul>


<p>Unfortunately, as of this writing the documentation parser doesn&#8217;t output structure-field comment-docs, but the <a href="https://github.com/libgit2/libgit2/blob/HEAD/include/git2/repository.h#files">header</a> is pretty helpful.</p>

<h2>What now?</h2>

<p>I dunno.
What are you trying to do?
You could always check out my <a href="http://ben.github.com/blog/categories/libgit2/">other libgit2 posts</a> for some ideas.
Or look for help <a href="https://www.google.com/search?q=how%20do%20I%20use%20libgit2%20to">everywhere else</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012: Year in Review]]></title>
    <link href="http://ben.github.com/2013/01/10/year-in-review/"/>
    <updated>2013-01-10T22:28:00-08:00</updated>
    <id>http://ben.github.com/2013/01/10/year-in-review</id>
    <content type="html"><![CDATA[<p>My 2012, through the GitHub lens.  Inspired by <a href="https://github.com/blog/1360-introducing-contributions">Tim Clem</a>.</p>

<p><a href="http://ben.github.com/images/contributions-2012.png"><img src="http://ben.github.com/images/contributions-2012.png" alt="Annotated GitHub Contributions Chart" /></a></p>

<p>I guess it&#8217;s not that surprising, but vacations, travel, and holidays show up pretty clearly.</p>

<p>Yes, there are two honeymoons.  Both of them piggybacked on business travel &#8212; the first was a <a href="http://www.beckyjenson.com/2012/06/hawaiian-simplicity/">destination wedding</a> I photographed with my lovely wife a week after we were married, and the second was glued to a <a href="http://www.openblend.org/en/home">conference</a> I <a href="http://ben.github.com/talks/openblend.html">spoke at</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stupid Libgit2 Tricks Cloning]]></title>
    <link href="http://ben.github.com/2013/01/10/stupid-libgit2-tricks-cloning/"/>
    <updated>2013-01-10T00:00:00-08:00</updated>
    <id>http://ben.github.com/2013/01/10/stupid-libgit2-tricks-cloning</id>
    <content type="html"><![CDATA[<p>ïœ«&#8212;
layout: post
title: &#8220;libgit2: Cloning&#8221;
date: 2013-02-01 10:00
comments: true</p>

<h2>categories: libgit2</h2>

<p><a href="http://libgit2.github.com">Libgit2</a> aims to make it easy to do interesting things
with git.  What&#8217;s the first thing you always do when learning git?  That&#8217;s
right, you clone something from GitHub.  Let&#8217;s get started, shall we? Let&#8217;s get
some of the boilerplate out of the way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="cp">#include &quot;git2.h&quot;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="o">*</span><span class="n">path</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;USAGE: clone &lt;url&gt; &lt;path&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">url</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">do_clone</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">path</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></figure>


<p>What does the do_clone method look like?  Let&#8217;s start simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="k">static</span> <span class="kt">int</span> <span class="nf">do_clone</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">git_clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">git_repository_free</span><span class="p">(</span><span class="n">repo</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></figure>


<p><code>git_clone</code> takes some information, and fills in a pointer for us with
a <code>git_repository</code> object we can use to do <em>all manner of unholy things</em>.  For
now, let&#8217;s ignore the repository itself, except to be good citizens and release
the memory associated with it.</p>

<p>That <code>NULL</code> parameter?  That&#8217;s for a <code>git_clone_options</code> structure, which
defaults to some sensible stuff.  The way our code is written right now, these
two commands will have the same results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='sh'>./clone http://github.com/libgit2/libgit2 ./libgit2
git clone http://github.com/libgit2/libgit2
</code></pre></div></figure>


<p>&#8230; except that <code>git</code> tells you what it&#8217;s doing.  Let&#8217;s fix that.</p>

<p>One of the things you can do with <code>git_clone_options</code> is have libgit2 call
a function when there is progress to report.  A typical callback looks like
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="k">static</span> <span class="kt">void</span> <span class="nf">fetch_progress</span><span class="p">(</span>
        <span class="k">const</span> <span class="n">git_transfer_progress</span> <span class="o">*</span><span class="n">stats</span><span class="p">,</span>
        <span class="kt">void</span> <span class="o">*</span><span class="n">payload</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">fetch_percent</span> <span class="o">=</span>
        <span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">stats</span><span class="o">-&gt;</span><span class="n">received_objects</span><span class="p">)</span> <span class="o">/</span>
        <span class="n">stats</span><span class="o">-&gt;</span><span class="n">total_objects</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">index_percent</span> <span class="o">=</span>
        <span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">stats</span><span class="o">-&gt;</span><span class="n">indexed_objects</span><span class="p">)</span> <span class="o">/</span>
        <span class="n">stats</span><span class="o">-&gt;</span><span class="n">total_objects</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">kbytes</span> <span class="o">=</span> <span class="n">stats</span><span class="o">-&gt;</span><span class="n">received_bytes</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;network %3d%% (%4d kb, %5d/%5d)  /&quot;</span>
            <span class="s">&quot;  index %3d%% (%5d/%5d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
            <span class="n">fetch_percent</span><span class="p">,</span> <span class="n">kbytes</span><span class="p">,</span>
            <span class="n">stats</span><span class="o">-&gt;</span><span class="n">received_objects</span><span class="p">,</span> <span class="n">stats</span><span class="o">-&gt;</span><span class="n">total_objects</span><span class="p">,</span>
            <span class="n">index_percent</span><span class="p">,</span>
            <span class="n">stats</span><span class="o">-&gt;</span><span class="n">indexed_objects</span><span class="p">,</span> <span class="n">stats</span><span class="o">-&gt;</span><span class="n">total_objects</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></figure>


<p>That <code>stats</code> object gives you lots of useful stuff:</p>

<ul>
<li>The number of objects transferred over the network</li>
<li>The number of objects that the indexer has processed</li>
<li>The total number of objects expected</li>
<li>The number of bytes transferred</li>
</ul>


<p>So let&#8217;s rewrite our <code>do_clone</code> function to plug that in:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c'><span class="k">static</span> <span class="kt">int</span> <span class="nf">do_clone</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">git_clone_options</span> <span class="n">opts</span> <span class="o">=</span> <span class="n">GIT_CLONE_OPTIONS_INIT</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>

    <span class="n">opts</span><span class="p">.</span><span class="n">fetch_progress_cb</span> <span class="o">=</span> <span class="n">fetch_progress</span><span class="p">;</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">git_clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">opts</span><span class="p">);</span>
    <span class="n">git_repository_free</span><span class="p">(</span><span class="n">repo</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></figure>


<p>If you run this now, the program will tell you what it&#8217;s doing!  You can watch
the network transfer happening, and notice that the indexer is doing its job
<em>at the same time</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='text'>[...]
network  73% (   7 kb,    51/   69)  /  index  71% (   49/   69)
network  75% (   7 kb,    52/   69)  /  index  72% (   50/   69)
network  76% (   7 kb,    53/   69)  /  index  73% (   51/   69)
network  78% (   7 kb,    54/   69)  /  index  75% (   52/   69)
[...]
</code></pre></div></figure>


<p>If you try this with a large repository, you&#8217;ll notice a significant pause at
the end.  All the data has been moved, what&#8217;s going on?  It turns out that
doing a checkout can take a non-trivial amount of time.  It also turns out that
libgit2 will let you report that progress as well!</p>

<p>But that&#8217;s part of checkout, which warrants its own blog post.  In the
meantime, check out the <a href="https://github.com/libgit2/libgit2/blob/development/include/git2/clone.h">clone
header</a>
to see what <code>git_clone</code> can do.  If you want to, you could even use the <a href="https://gist.github.com/4693571">code
from this post</a> as a starting point for your
own experiments.</p>

<h2>What now?</h2>

<p>I dunno.
What are you trying to do?
You could always check out my <a href="http://ben.github.com/blog/categories/libgit2/">other libgit2 posts</a> for some ideas.
Or look for help <a href="https://www.google.com/search?q=how%20do%20I%20use%20libgit2%20to">everywhere else</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Part of Waking Up]]></title>
    <link href="http://ben.github.com/2012/10/24/the-best-part-of-waking-up/"/>
    <updated>2012-10-24T19:08:00-07:00</updated>
    <id>http://ben.github.com/2012/10/24/the-best-part-of-waking-up</id>
    <content type="html"><![CDATA[<p>It seems like such a small detail: what&#8217;s the first thing you do when you wake
up?  Hop in the shower?  Check your email?  Hit Reddit for a <a href="http://aww.reddit.com/">quick puppy
fix</a> before the coffee starts working?</p>

<p>I recently switched to writing code.</p>

<h2>Setting the tone</h2>

<p>You wake up each day completely fresh.  It takes a while before all the worries
from yesterday make themselves known again, so for a while you have an empty,
clear mind.  And the first thing you put in is going to stick.</p>

<p>I used to read email, Twitter, and Facebook first thing in the morning.  That
got me current with what happened while I was asleep, but it put me in the
mindset of keeping up.  <em>Following</em>.  From that point on, I had to know what
was going on, and since people are constantly doing things, I was always
behind.  I hate being behind.</p>

<h2>Mindset</h2>

<p>The write-first strategy puts you in the maker&#8217;s mindset.  You&#8217;ve made things
all day, you&#8217;ve been fixing bugs since before breakfast.</p>

<p>A read-first morning puts you in the mindset of a consumer.  You&#8217;re looking to
<em>be</em> entertained, always out for that next endorphin hit.  Not only does this
reduce your output, it <a href="http://devburner.net/2012/07/the-1-thing-that-will-destroy-your-creativity-in-the-morning/">kills your creativity</a>.</p>

<p>I&#8217;ve found that some of my best ideas come to me in the shower, but there needs
to be something I&#8217;m working on in that part of my mind that lurks just behind
the conscious.  If that something is &#8220;I wonder what <a href="http://daringfireball.net/">Gruber</a> is thinking
about,&#8221; I&#8217;m missing a great opportunity.  I&#8217;d much rather be solving problems.
Besides, the answer is always &#8220;Apple, or maybe baseball.&#8221;</p>

<h2>The Power of Habit</h2>

<p>We like to think of ourselves as sentient beings with free will.  This is
a pleasant fiction, with many practical benefits, but as any psychologist will
tell you, it&#8217;s not exactly true.  On any given day, it&#8217;s likely that a person
will do the same thing she did yesterday, as opposed to a completely new thing.
We&#8217;re mammals, and habit is powerful.</p>

<p>What if your habits weren&#8217;t harmful, like heroin, or merely benign, like
drinking coffee?  What if they were constructive, what if they actually made
you feel <em>better</em>?</p>

<p>It&#8217;s been working.  I feel more like a maker if, before I do anything else,
I make something.  I start checking Twitter and Facebook as break time, rather
than using them to avoiding real work, and I get more real work done.</p>

<p>It&#8217;s amazing what power a small detail can have.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Native Win32 for fun and profit]]></title>
    <link href="http://ben.github.com/2011/02/02/native-win32-for-fun-and-profit/"/>
    <updated>2011-02-02T00:00:00-08:00</updated>
    <id>http://ben.github.com/2011/02/02/native-win32-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p><em>[Note: this is ported from my <a href="http://ben.straubnet.net/post/3074077580/native-win32-for-fun-and-profit">old
blog</a>,
and there&#8217;s more discussion there.]</em></p>

<p>All the cool kids these days are playing with awesome dynamic languages, or on
cool frameworks.  I&#8217;m stuck with c++ at work, but every now and then I get to
do something cool with it.</p>

<p><img src="http://ben.github.com/images/nativewin32/1.png" alt="radial menu" /></p>

<p>That&#8217;s the <a href="http://graphicssoft.about.com/od/hardware/ig/Wacom-Intuos4/Intuos4-Radial-Menu.htm">Wacom radial
menu</a>,
which is implemented as a fully alpha-blended window in native Win32. Something
like this is dead simple in WPF, but with native code it&#8217;s a bit trickier.
I used WTL, GDI+, and a handy, little-known Windows feature to get it done, and
I&#8217;m going to share my secrets with you, dear reader.</p>

<h2>Dependencies</h2>

<h4>WTL</h4>

<p>Windowing frameworks are thick on the ground, and I&#8217;ve been mostly dissatisfied
with the abilities of the Win32-wrapping category. However, they make something
like this reusable, so what the heck.</p>

<p>You can grab WTL at <a href="http://wtl.sourceforge.net/">the project home on
SourceForge</a>. For this project, I&#8217;m just taking
the files in the <code>include</code> directory and putting them under <code>wtl</code> in my project
directory, so I don&#8217;t get the Windows SDK versions instead.</p>

<p>I&#8217;ve found this to be the best way to include the WTL headers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="cp">#define _SECURE_ATL 1</span>
<span class="cp">#define _WTL_NO_AUTOMATIC_NAMESPACE</span>
<span class="cp">#define _ATL_NO_AUTOMATIC_NAMESPACE</span>

<span class="c1">// These are required to be included first</span>
<span class="cp">#include &quot;atlbase.h&quot;</span>
<span class="cp">#include &quot;atlwin.h&quot;</span>
<span class="cp">#include &quot;wtl/atlapp.h&quot;</span>

<span class="cp">#include &quot;wtl/atlgdi.h&quot;   </span><span class="c1">// For WTL::CDC</span>
<span class="cp">#include &quot;wtl/atlframe.h&quot; </span><span class="c1">// For WTL::CFrameWindowImpl</span>
</code></pre></div></figure>


<p>Those defines specify that the ATL and WTL classes should stay safely ensconced
in their own namespaces. This means you have to reference them as
<code>WTL::CFrameWndImpl</code>, but it keeps the global namespace clean, which is a major
failing of <code>windows.h</code>.</p>

<h4>GDI+</h4>

<p>GDI+ is an immediate-mode drawing API that has shipped with Windows since XP,
so I can use it without needing to ship yet another redistributable installer.
Here&#8217;s all you need to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="cp">#pragma comment(lib, &quot;gdiplus.lib&quot;)</span>
<span class="cp">#include &amp;lt;gdiplus.h&gt;</span>
</code></pre></div></figure>


<p>While GDI+ is written in c++ and uses classes, it&#8217;s initialization isn&#8217;t
RAII-friendly, so I wrote a little wrapper class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="k">class</span> <span class="nc">ScopedGdiplusInitializer</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="n">ScopedGdiplusInitializer</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">GdiplusStartupInput</span> <span class="n">gdisi</span><span class="p">;</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">GdiplusStartup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mGdipToken</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">gdisi</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="o">~</span><span class="n">ScopedGdiplusInitializer</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">GdiplusShutdown</span><span class="p">(</span><span class="n">mGdipToken</span><span class="p">);</span>
  <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
  <span class="n">ULONG_PTR</span> <span class="n">mGdipToken</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></figure>


<p>Now I can write my main function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">ScopedGdiplusInitializer</span> <span class="n">gdiplusinit</span><span class="p">;</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></figure>


<h4>Boost</h4>

<p>The production code for this feature uses boost (specifically <code>shared_ptr</code>),
but in the interest of simplicity I&#8217;ve left it out. If you use boost, or your
compiler supports the new <code>std::shared_ptr</code> introduced with TR1, I <em>highly</em>
recommend you use that instead of raw pointers whenever possible.</p>

<h2>A window class</h2>

<p>Here&#8217;s where it all comes together. Meet me after the code, and I&#8217;ll explain
more fully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="k">class</span> <span class="nc">AlphaWindow</span>
  <span class="o">:</span> <span class="k">public</span> <span class="n">WTL</span><span class="o">::</span><span class="n">CFrameWindowImpl</span><span class="o">&lt;</span>
      <span class="n">AlphaWindow</span><span class="p">,</span> <span class="n">ATL</span><span class="o">::</span><span class="n">CWindow</span><span class="p">,</span>
      <span class="n">ATL</span><span class="o">::</span><span class="n">CWinTraits</span><span class="o">&lt;</span> <span class="n">WS_POPUP</span><span class="p">,</span> <span class="n">WS_EX_LAYERED</span> <span class="o">&gt;</span> <span class="o">&gt;</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="n">DECLARE_FRAME_WND_CLASS</span><span class="p">(</span><span class="n">_T</span><span class="p">(</span><span class="s">&quot;WTLAlphaWindow&quot;</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">virtual</span> <span class="o">~</span><span class="n">AlphaWindow</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">IsWindow</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">SendMessage</span><span class="p">(</span><span class="n">WM_CLOSE</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kt">void</span> <span class="n">UpdateWithBitmap</span><span class="p">(</span><span class="n">Gdiplus</span><span class="o">::</span><span class="n">Bitmap</span> <span class="o">*</span><span class="n">bmp_I</span><span class="p">,</span>
                        <span class="n">POINT</span> <span class="o">*</span><span class="n">windowLocation_I</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// Create a memory DC</span>
    <span class="n">HDC</span> <span class="n">screenDC</span> <span class="o">=</span> <span class="o">::</span><span class="n">GetDC</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="n">WTL</span><span class="o">::</span><span class="n">CDC</span> <span class="n">memDC</span><span class="p">;</span>
    <span class="n">memDC</span><span class="p">.</span><span class="n">CreateCompatibleDC</span><span class="p">(</span><span class="n">screenDC</span><span class="p">);</span>
    <span class="o">::</span><span class="n">ReleaseDC</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">screenDC</span><span class="p">);</span>

    <span class="c1">// Copy the input bitmap and select it into the</span>
    <span class="c1">// memory DC</span>
    <span class="n">WTL</span><span class="o">::</span><span class="n">CBitmap</span> <span class="n">localBmp</span><span class="p">;</span>
    <span class="p">{</span>
      <span class="n">bmp_I</span><span class="o">-&gt;</span><span class="n">GetHBITMAP</span><span class="p">(</span><span class="n">Gdiplus</span><span class="o">::</span><span class="n">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
                        <span class="o">&amp;</span><span class="n">localBmp</span><span class="p">.</span><span class="n">m_hBitmap</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">HBITMAP</span> <span class="n">oldBmp</span> <span class="o">=</span> <span class="n">memDC</span><span class="p">.</span><span class="n">SelectBitmap</span><span class="p">(</span><span class="n">localBmp</span><span class="p">);</span>

    <span class="c1">// Update the display</span>
    <span class="n">POINT</span> <span class="n">p</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">SIZE</span> <span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="n">bmp_I</span><span class="o">-&gt;</span><span class="n">GetWidth</span><span class="p">(),</span> <span class="n">bmp_I</span><span class="o">-&gt;</span><span class="n">GetHeight</span><span class="p">()};</span>
    <span class="n">BLENDFUNCTION</span> <span class="n">bf</span> <span class="o">=</span> <span class="p">{</span><span class="n">AC_SRC_OVER</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
                        <span class="mi">255</span><span class="p">,</span> <span class="n">AC_SRC_ALPHA</span><span class="p">};</span>
    <span class="p">{</span>
      <span class="o">::</span><span class="n">UpdateLayeredWindow</span><span class="p">(</span><span class="n">m_hWnd</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
                            <span class="n">windowLocation_I</span><span class="p">,</span>
                            <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="n">memDC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span>
                            <span class="n">RGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span>
                            <span class="o">&amp;</span><span class="n">bf</span><span class="p">,</span> <span class="n">ULW_ALPHA</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">ShowWindow</span><span class="p">(</span><span class="n">SW_SHOWNORMAL</span><span class="p">);</span>

    <span class="c1">// Cleanup</span>
    <span class="n">memDC</span><span class="p">.</span><span class="n">SelectBitmap</span><span class="p">(</span><span class="n">oldBmp</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></figure>


<h3>Layered Windows</h3>

<p>The magic ingredients for this class are the <code>WS_EX_*</code> styles and the
<code>UpdateLayeredWindow</code> call.</p>

<p>First, the styles. These are specified on line 3, as part of the base class.
That&#8217;s just how you declare your window&#8217;s styles in WTL. There are two:</p>

<ul>
<li><code>WS_POPUP</code> means this is a square window with no decorations around the
outside. No title bar, no close button, nothing.</li>
<li><code>WS_EX_LAYERED</code> tells Windows that <a href="http://msdn.microsoft.com/en-us/library/ms997507.aspx">this window is
different</a>, and that
it can do per-pixel alpha blending with other windows. This was available in
Windows 2000, but starting with Vista the window&#8217;s face could be cached and
composited by the GPU, which made it much more useful.</li>
</ul>


<p>The call to <code>UpdateLayeredWindow</code> on line 35 is what tells Windows what the
contents of the display are. There&#8217;s some clunky interop code here, since the
GDI+ <code>Bitmap</code> object can&#8217;t be used directly with the GDI-oriented layered
window API. I&#8217;m sure there&#8217;s a better way, but in my case the overhead of
copying my smallish <code>Bitmap</code> into another smallish <code>HBITMAP</code> wasn&#8217;t a problem.</p>

<p>WTL complains rather loudly if a window object is destroyed before the HWND
it&#8217;s wrapping is closed, so the destructor on line 7 takes care of that.</p>

<h3>Pretty Pictures</h3>

<p>That <code>UpdatedLayeredWindow</code> call is wrapped in a method that takes a GDI+
bitmap, so now all we need to do is provide it with one. GDI+ makes this pretty
easy, especially when compared to GDI code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="k">using</span> <span class="k">namespace</span> <span class="n">Gdiplus</span><span class="p">;</span>
<span class="c1">// Create a bitmap buffer</span>
<span class="n">Bitmap</span> <span class="n">bmp</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">400</span><span class="p">);</span>
<span class="c1">// Context for drawing on the bitmap</span>
<span class="n">Graphics</span> <span class="n">g</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bmp</span><span class="p">);</span>
<span class="n">g</span><span class="p">.</span><span class="n">Clear</span><span class="p">(</span><span class="n">Color</span><span class="o">::</span><span class="n">Black</span><span class="p">);</span>
<span class="c1">// ...</span>
</code></pre></div></figure>


<h2>All together now</h2>

<p>Here&#8217;s the <code>main</code> function of my little test program.</p>

<figure class='code'><figcaption><span></span></figcaption><div class='highlight'><pre><code class='c++'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">ScopedGdiplusInitializer</span> <span class="n">init</span><span class="p">;</span>

  <span class="p">{</span>
    <span class="c1">// Create the display window</span>
    <span class="n">AlphaWindow</span> <span class="n">wnd</span><span class="p">;</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">Create</span><span class="p">();</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">SetWindowPos</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span>
                     <span class="n">SWP_NOSIZE</span> <span class="o">|</span> <span class="n">SWP_NOREPOSITION</span><span class="p">);</span>

    <span class="c1">// Create a backbuffer</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">Bitmap</span> <span class="n">bmp</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">400</span><span class="p">);</span>

    <span class="c1">// Clear the background of the buffer to</span>
    <span class="c1">// translucent black</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">Graphics</span> <span class="n">g</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bmp</span><span class="p">);</span>
    <span class="n">g</span><span class="p">.</span><span class="n">Clear</span><span class="p">(</span><span class="n">Gdiplus</span><span class="o">::</span><span class="n">Color</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>

    <span class="c1">// This tells GDI+ to anti-alias edges</span>
    <span class="n">g</span><span class="p">.</span><span class="n">SetSmoothingMode</span><span class="p">(</span>
       <span class="n">Gdiplus</span><span class="o">::</span><span class="n">SmoothingModeAntiAlias</span><span class="p">);</span>

    <span class="c1">// Draw two semi-transparent ellipses</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">Pen</span> <span class="n">redPen</span><span class="p">(</span><span class="n">Gdiplus</span><span class="o">::</span><span class="n">Color</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
                        <span class="mf">10.</span><span class="p">);</span>
    <span class="n">Gdiplus</span><span class="o">::</span><span class="n">Pen</span> <span class="n">bluePen</span><span class="p">(</span><span class="n">Gdiplus</span><span class="o">::</span><span class="n">Color</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span>
                         <span class="mf">10.</span><span class="p">);</span>
    <span class="n">g</span><span class="p">.</span><span class="n">DrawEllipse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redPen</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">);</span>
    <span class="n">g</span><span class="p">.</span><span class="n">DrawLine</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bluePen</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span><span class="mi">390</span><span class="p">);</span>
    <span class="n">g</span><span class="p">.</span><span class="n">DrawEllipse</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redPen</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">);</span>

    <span class="c1">// Update the window&#39;s display</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">UpdateWithBitmap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bmp</span><span class="p">);</span>

    <span class="c1">// Wait to exit</span>
    <span class="n">getchar</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></figure>


<p>I know, programmer demos of this are always ugly. Maybe one day I&#8217;ll write
about how to store a PNG as a resource, and load it in for use with this. For
now, you get an ugly screenshot:</p>

<p><img src="http://ben.github.com/images/nativewin32/2.png" alt="ugly test image" /></p>
]]></content>
  </entry>
  
</feed>
